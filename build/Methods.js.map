{"version":3,"sources":["Methods.js"],"names":["MethodPost","setHeadline","e","headline","setArticleBody","articleBody","MethodGet","setPostLima","r","postLima","id","MethodUpdate","setId","setHeadLine","MethodDelete"],"mappings":"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","sourcesContent":["import { React, useEffect, useState } from 'react'\nimport { GET, POST, UPDATE, DELETE } from './Request'\nimport ClayTable from '@clayui/table'\nimport { ClayForm, ClayInput } from \"@clayui/form\"\nimport ClayButton from \"@clayui/button\"\n\nconst MethodPost = () => {\n\tconst [ headline, setHeadline ] = useState('')\n\tconst [ articleBody, setArticleBody ] = useState('')\n  \n\treturn (\n\t  <>\n\t\t<ClayForm>\n\t\t  <ClayForm.Group className = 'form-group-sm'>\n\t\t\t<label htmlFor = 'basicInput'>headline</label>\n\t\t\t<ClayInput\n\t\t\t  id = 'headline'\n\t\t\t  onChange = {(e) => setHeadline(e.target.value)}\n\t\t\t  placeholder = 'headline'\n\t\t\t  type = 'text'\n\t\t\t  value = { headline }\n\t\t\t/>\n\t\t  </ClayForm.Group>\n\t\t  <ClayForm.Group className = 'form-group-sm'>\n\t\t\t<label htmlFor = 'basicInput'>articleBody</label>\n\t\t\t<ClayInput\n\t\t\t  id = 'articleBody'\n\t\t\t  onChange = {(e) => setArticleBody(e.target.value)}\n\t\t\t  placeholder = 'articleBody'\n\t\t\t  type = 'text'\n\t\t\t  value = { articleBody }\n\t\t\t/>\n\t\t  </ClayForm.Group>\n\n\t\t  <ClayButton onClick = {() => \n\t\t\tPOST(headline, articleBody)\n\t\t\t.then(() => setHeadline(''), setArticleBody(''))\n\t\t\t} displayType = 'primary'>\n\t\t\t\t\tCADASTRAR\n\t\t  </ClayButton>\n\t\t</ClayForm>\n\t  </>\n\t);\n  };\n\n  //\n\nconst MethodGet = () => {\n\tconst [ postLima, setPostLima ] = useState([])\n\n\tuseEffect(() => {\n\t  GET().then((r) => setPostLima(r.items))\n\t}, [ postLima ])\n\n    return (\n<>\n\n<ClayTable>\n\t<ClayTable.Head>\n  \t\t<ClayTable.Row>\n  \t\t\t<ClayTable.Cell headingCell>{'id'}</ClayTable.Cell>\n  \t\t\t<ClayTable.Cell headingCell>{'headline'}</ClayTable.Cell>\n\t\t\t<ClayTable.Cell headingCell>{'articleBody'}</ClayTable.Cell>\n  \t\t</ClayTable.Row>\n\t</ClayTable.Head>\n<ClayTable.Body>\n\t<ClayTable.Row key = { postLima.id }>\n\t\t<ClayTable.Cell >{ postLima.id }</ClayTable.Cell>\n\t\t<ClayTable.Cell>{ postLima.headline }</ClayTable.Cell>\n\t\t<ClayTable.Cell >{ postLima.articleBody }</ClayTable.Cell>\n  \t</ClayTable.Row>\n</ClayTable.Body>\n</ClayTable>\n\n<MethodPost />\t\n\n</>\n  \t)\n}\t\n\n\t//\n\n\tconst MethodUpdate = () => {\n\t\tconst [ headline, setheadline ] = useState('')\n\t\tconst [ articleBody, setArticleBody ] = useState('')\n\t\tconst [ id, setId ] = useState('')\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<ClayForm>\n\t\t\t\t\t<ClayForm.Group className = 'form-group-sm'>\n\t\t\t\t\t\t<h1>UPDATE</h1>\n\t\t\t\t\t\t<label htmlFor='id'>ID</label>\n\t\t\t\t\t\t<ClayInput\n\t\t\t\t\t\t\tid = 'id'\n\t\t\t\t\t\t\tonChange = {(e) => setId(e.target.value)}\n\t\t\t\t\t\t\tplaceholder = 'id'\n\t\t\t\t\t\t\ttype = 'text'\n\t\t\t\t\t\t\tvalue = { id }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ClayForm.Group>\n\t\t\t\t\t<ClayForm.Group className = 'form-group-sm'>\n\t\t\t\t\t\t<h1>UPDATE HeadLine</h1>\n\t\t\t\t\t\t<label htmlFor = 'id'>HeadLine</label>\n\t\t\t\t\t\t<ClayInput \n\t\t\t\t\t\t\tid = 'id'\n\t\t\t\t\t\t\tonChange = {(e) => setHeadLine(e.target.value)}\n\t\t\t\t\t\t\tplaceholder = 'headline'\n\t\t\t\t\t\t\ttype = 'text'\n\t\t\t\t\t\t\tvalue = { headline }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ClayForm.Group>\n\t\t\t\t\t<ClayForm.Group className = 'form-group-sm'>\n\t\t\t\t\t\t<h1>UPDTE ArticleBody</h1>\n\t\t\t\t\t\t<label htmlFor = 'id'>ArticleBody</label>\n\t\t\t\t\t\t<ClayInput \n\t\t\t\t\t\t\tid = 'id'\n\t\t\t\t\t\t\tonChange = {(e) => setArticleBody(e.target.value)}\n\t\t\t\t\t\t\tplaceholder = 'articlebody'\n\t\t\t\t\t\t\ttype = 'text'\n\t\t\t\t\t\t\tvalue = { articleBody }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ClayForm.Group>\n\n\t\t\t\t\t<ClayButton onClick = { UPDATE(id ,headline, articleBody) }\n\t\t\t\t\tdisplayType='primary'>\n\t\t\t\t\t\t\t\t\tUPDATE\n\t\t\t\t\t</ClayButton>\n\t\t\t\t</ClayForm>\n\t\t\t</>\n\t\t)\n\t}\n\n\t//\n\n\tconst MethodDelete = () => {\n\t\tconst [ id, setId ] = useState('')\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<ClayForm.Group className = 'form-group-sm'>\n\t\t\t\t\t<label htmlFor = 'id'>Delete</label>\n\t\t\t\t\t<ClayInput \n\t\t\t\t\t\tid = 'id'\n\t\t\t\t\t\tonChange = {(e) => setId(e.target.value)}\n\t\t\t\t\t\tplaceholder = 'Delete'\n\t\t\t\t\t\ttype = 'text'\n\t\t\t\t\t\tvalue = { id }\n\t\t\t\t\t/>\n\t\t\t\t</ClayForm.Group>\n\n\t\t\t\t<ClayButton onClick = { DELETE(id)}\n\t\t\t\tdisplayType = 'primary'>\n\t\t\t\t\t\t\tDELETE\n\t\t\t\t</ClayButton>\n\t\t\t</>\n\t\t)\n\t}\n\nexport { MethodGet, MethodPost, MethodUpdate, MethodDelete }"]}